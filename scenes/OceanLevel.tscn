[gd_scene load_steps=20 format=2]

[ext_resource path="res://scenes/boats/LugBoat.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/WaterManager.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/WaterMesh.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/IslandsManager.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/Tutorial.gd" type="Script" id=5]
[ext_resource path="res://game_env.tres" type="Environment" id=6]
[ext_resource path="res://src/SaveManager.gd" type="Script" id=7]
[ext_resource path="res://src/free_camera.gd" type="Script" id=8]
[ext_resource path="res://scenes/FPScounter.tscn" type="PackedScene" id=9]
[ext_resource path="res://materials/fog_particle_material.tres" type="Material" id=10]
[ext_resource path="res://src/Clouds.gd" type="Script" id=11]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode world_vertex_coords, cull_disabled;

varying float z_dist;
varying vec3 frag_normal;

uniform float max_dist = 50.0f;

uniform sampler2D noise_texture;
//uniform sampler2D trail_texture;
uniform float amplitude = 0.1;
uniform float frequency = 5.0;
uniform float time = 0.0;

uniform float first_wave_dir = 0.0;
uniform float second_wave_dir = 0.7;
uniform float gerstner_coef = 1.0;

uniform float ripple_depth = 0.5;
uniform float ripple_speed = 0.009;


uniform vec4 water_color: hint_color = vec4(0.1, 0.1, 0.9, 1.0);

vec2 first_dir_vect(){
	return vec2(cos(first_wave_dir), sin(first_wave_dir));
}

vec2 second_dir_vect(){
	return vec2(cos(second_wave_dir), sin(second_wave_dir));
}

float first_dir(vec2 pos){
	vec2 dir = first_dir_vect();
	return dir.x * pos.x + dir.y * pos.y;
}

float second_dir(vec2 pos){
	vec2 dir = second_dir_vect();
	return dir.x * pos.x + dir.y * pos.y;
}

float wave_height(vec2 pos){
	float first = first_dir(pos);
	float second = second_dir(pos);
	return amplitude * sin(first * frequency + time)
	+ amplitude * sin(second * frequency + time);
}

vec2 wave_gerstner(vec2 pos){
	float frst = cos(first_dir(pos) * frequency + time);
	float scnd = cos(second_dir(pos) * frequency + time);
	vec2 fdir = first_dir_vect();
	vec2 sdir = second_dir_vect();
	float x = fdir.x * frst + sdir.x * scnd;
	float y = fdir.y * frst + sdir.y * scnd;
	return gerstner_coef * amplitude * vec2(x,y);
}


void vertex() {
	float e = 0.02;
	vec3 vertex_offset_x = VERTEX + vec3(e,0,0);
	vec3 vertex_offset_z = VERTEX + vec3(0,0,e);
	vec3 vertex_pos = VERTEX;
	
	vec3 res_pos, res_offset_x, res_offset_z;
	res_pos.y = vertex_pos.y + wave_height(vertex_pos.xz);
	res_pos.xz = vertex_pos.xz + wave_gerstner(vertex_pos.xz);
	
	res_offset_x.y = vertex_offset_x.y + wave_height(vertex_offset_x.xz);
	res_offset_x.xz = vertex_offset_x.xz + wave_gerstner(vertex_offset_x.xz);
	
	res_offset_z.y = vertex_offset_z.y + wave_height(vertex_offset_z.xz);
	res_offset_z.xz = vertex_offset_z.xz + wave_gerstner(vertex_offset_z.xz);
	
	vec3 vect_x = res_offset_x - res_pos;
	vec3 vect_z = res_offset_z - res_pos;
	
//	float dent_dist = clamp(length(vec4(VERTEX, 1.0).xz) * 0.1, 0.0, 1.57);
//	res_pos.y -= cos(dent_dist) * 5.0;
	VERTEX = res_pos;
	
	z_dist = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).z * -1.0;
	frag_normal = normalize(cross(vect_z,vect_x));
}

void fragment(){
	//ALPHA_SCISSOR = 0.5;
	//ALPHA = float(z_dist < max_dist);

	//float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
//	vec3 screen_tex_col = vec3(1.0,1.0,1.0); //textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb * 3.15;
//	depth = depth *2.0 -1.0;
//	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
//	depth = depth + VERTEX.z;
	//depth = clamp(exp(-depth*1.5), 0.0, 1.0);
	
	vec4 VERTEX_WORLD = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	float height = clamp(VERTEX_WORLD.y * 0.5 - 0.2, 0.0, 1.0);
	vec3 color = water_color.xyz;
	
	vec2 uv = VERTEX_WORLD.xz * 0.01;
	
	vec4 n1 = texture(noise_texture, uv + vec2(time*ripple_speed));
	vec4 n2 = texture(noise_texture, -uv + vec2(time*ripple_speed));
	vec4 noise_normal = mix(n1,n2,0.5);
	
	//vec4 trail = texture(trail_texture, UV);
	ALBEDO = color;
	
	EMISSION = vec3(height * 0.2);
	
	NORMALMAP = noise_normal.xyz;
	NORMALMAP_DEPTH = ripple_depth;
	
	mat3 invcam = mat3( INV_CAMERA_MATRIX[0].xyz,
					INV_CAMERA_MATRIX[1].xyz,
					INV_CAMERA_MATRIX[2].xyz);
	
	NORMAL = normalize(cross(dFdx(VERTEX), dFdy(VERTEX)));
	NORMAL = invcam * frag_normal;
	
	METALLIC = 0.0;
	SPECULAR = 0.0;
	ROUGHNESS = /*1.0;*/0.2;
}
"

[sub_resource type="OpenSimplexNoise" id=2]
octaves = 2
period = 20.0

[sub_resource type="NoiseTexture" id=3]
width = 1024
height = 1024
seamless = true
as_normalmap = true
bump_strength = 32.0
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/max_dist = 400.0
shader_param/amplitude = 0.2
shader_param/frequency = 0.3
shader_param/time = 1731.84
shader_param/first_wave_dir = -1.9627
shader_param/second_wave_dir = -1.1773
shader_param/gerstner_coef = 2.0
shader_param/ripple_depth = 0.375
shader_param/ripple_speed = 0.01
shader_param/water_color = Color( 0, 1, 0.976471, 1 )
shader_param/noise_texture = SubResource( 3 )

[sub_resource type="Gradient" id=5]
offsets = PoolRealArray( 0, 0.202899, 0.746377, 1 )
colors = PoolColorArray( 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )

[sub_resource type="ParticlesMaterial" id=7]
lifetime_randomness = 0.1
emission_shape = 1
emission_sphere_radius = 100.0
direction = Vector3( 0, 0, 1 )
spread = 0.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 0.7
scale = 4.0
color_ramp = SubResource( 6 )
anim_offset = 1.0
anim_offset_random = 1.0

[sub_resource type="QuadMesh" id=8]
material = ExtResource( 10 )
size = Vector2( 32, 25 )

[node name="Root" type="Spatial"]

[node name="WaterMesh" parent="." instance=ExtResource( 3 )]
transform = Transform( 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0.103551, -46.6701 )
material/0 = SubResource( 4 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 6 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.232174, -0.664527, 0.710281, 0.938086, 0.0400219, 0.344082, -0.257079, 0.746191, 0.614092, 7.47769, 13.344, -64.6736 )
light_color = Color( 1, 0.964706, 0.847059, 1 )
light_energy = 0.2
shadow_enabled = true

[node name="IslandsManager" parent="." instance=ExtResource( 4 )]
spawn_distance = 500.0
horizon_distance = 300.0

[node name="WaterManager" parent="." instance=ExtResource( 2 )]
direction = -1.57

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 31.3042, 0 )
far = 1000.0
script = ExtResource( 8 )

[node name="Tutorial" type="Node" parent="."]
script = ExtResource( 5 )

[node name="SaveManager" type="Node" parent="."]
script = ExtResource( 7 )

[node name="FPScounter" parent="." instance=ExtResource( 9 )]

[node name="LugBoat" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -30, 0, 50 )

[node name="Clouds" type="Particles" parent="."]
transform = Transform( 3.57585, 0, -7.45058e-08, 0, 0.228, 0, 7.45058e-08, 0, 3.57585, 0, 84.8447, 0 )
amount = 128
lifetime = 5.0
visibility_aabb = AABB( -144.634, -263.315, -145.704, 289.325, 526.63, 291.408 )
local_coords = false
process_material = SubResource( 7 )
draw_pass_1 = SubResource( 8 )
script = ExtResource( 11 )
