[gd_scene load_steps=5 format=2]

[ext_resource path="res://textures/smoke/smoke3.png" type="Texture" id=1]

[sub_resource type="CubeMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_never, cull_back, depth_test_disable, unshaded;

uniform sampler2D albedo_texture : hint_albedo;
uniform vec4 albedo : hint_color = vec4(1.0);

uniform bool use_vertex_color = false;

varying vec3 decal_half_scale;
varying vec3 decal_right;
varying vec3 decal_up;
varying vec3 decal_forward;

//Checks if the given point is in the decal's boundaries using an oriented bounding box defined by the decal's tranform
bool is_point_in_decal_bounds(vec3 point, vec3 decal_position)
{
	vec3 scale = decal_half_scale * 2.0;
	vec3 p = point - decal_position;
	return abs(dot(p, decal_right)) <= scale.x && abs(dot(p, decal_forward)) <= scale.y && abs(dot(p, decal_up)) <= scale.z;
}


void vertex()
{
	vec3 world_position = (WORLD_MATRIX*vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	UV = world_position.xy;
	UV2 = vec2(world_position.z,0.0);
	
	decal_right = (WORLD_MATRIX*vec4(1.0, 0.0, 0.0, 1.0)).xyz - world_position;
	decal_forward = (WORLD_MATRIX*vec4(0.0, 0.0, -1.0, 1.0)).xyz - world_position;
	decal_up = (WORLD_MATRIX*vec4(0.0, 1.0, 0.0, 1.0)).xyz - world_position;
	decal_half_scale = vec3(length(decal_right), length(decal_forward), length(decal_up)) / 2.0;
	decal_right = normalize(decal_right);
	decal_forward = normalize(decal_forward);
	decal_up = normalize(decal_up);
}

void fragment ()
{
	//Compute world position using the depth buffer
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	vec4 world = CAMERA_MATRIX * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	vec3 world_position = world.xyz / world.w;
	
	vec3 decal_position = vec3(UV.xy, UV2.x);
	
	
	if(is_point_in_decal_bounds(world_position, decal_position))
	{
		vec4 local_position = (vec4(world_position - decal_position, 0.0)) * WORLD_MATRIX;
		vec2 uv_coords = (vec2(local_position.x, -local_position.z)  / (4.0*(decal_half_scale.xz * 2.0 * decal_half_scale.xz))) - vec2(0.5);
		TRANSMISSION = vec3(1.0) - local_position.xyz / 100.0;
		vec3 color = (use_vertex_color)?vec3(COLOR[0],COLOR[1],COLOR[2]):albedo.rgb;
		float alpha = (use_vertex_color)?COLOR[3]:albedo.a;
		ALBEDO = texture(albedo_texture, uv_coords).rgb * color;
		ALPHA = texture(albedo_texture, uv_coords).a * alpha;
	}else{
		ALPHA = 0.0;
	}
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = ExtResource( 1 )
shader_param/use_vertex_color = false

[node name="WaterKeel" type="MeshInstance"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -10, 0, 1, -4.37114e-07, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )
