[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[ext_resource path="res://default_icon.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.2.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_wind;
uniform sampler2D texture_normal;
uniform sampler2D texture_damage;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform float normal_scale;
uniform float time_scale;
uniform float offset_scale;
uniform float damage_scale = 0.0;
uniform float ripple_scale = 1.0;
uniform bool see_through = false;

float damage_scissors(){
	return 0.1 + 0.3 * clamp(damage_scale, 0.0, 1.0);
}

void vertex() {
	float offset = texture(texture_wind, UV * normal_scale - vec2(TIME*time_scale,0)).r;
	offset *= ripple_scale;
	VERTEX += NORMAL * (offset-0.5) * offset_scale * min(min(UV.x, UV.y*2.0), 2.0 - UV.y*2.0);
}

void fragment() {
	vec2 base_uv = UV * uv1_scale.xy+uv1_offset.xy;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	vec3 normal_tex = texture(texture_normal,UV * normal_scale - vec2(TIME*time_scale,0)).xyz;
	vec3 damage_tex = texture(texture_damage, UV).xyz;
	ALBEDO = albedo.rgb * albedo_tex.rgb * max(damage_tex.r, 1.0-damage_scale);
	ALPHA = damage_tex.r;
	
	vec2 pixel_coords = SCREEN_UV * VIEWPORT_SIZE;
	bool notvisible = ((int(pixel_coords.x) % 3) == 0) || ((int(pixel_coords.y) % 3) == 0);
	if(see_through && notvisible) ALPHA = 0.0;
	
	vec3 normal_diff = (normal_tex - vec3(0,0,1)) * ripple_scale;
	NORMAL += (normal_diff * (UV.x-0.2));
	
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA_SCISSOR = damage_scissors();
}
"

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=8]
noise = SubResource( 7 )

[sub_resource type="OpenSimplexNoise" id=3]
octaves = 1

[sub_resource type="NoiseTexture" id=4]
seamless = true
as_normalmap = true
bump_strength = 32.0
noise = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=5]
octaves = 1

[sub_resource type="NoiseTexture" id=6]
seamless = true
noise = SubResource( 5 )

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1.202, 2.254, 1 )
shader_param/uv1_offset = Vector3( -0.109, -0.399, 0 )
shader_param/normal_scale = 0.719
shader_param/time_scale = 1.0
shader_param/offset_scale = 0.245
shader_param/damage_scale = 0.0
shader_param/ripple_scale = 1.0
shader_param/see_through = false
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_wind = SubResource( 6 )
shader_param/texture_normal = SubResource( 4 )
shader_param/texture_damage = SubResource( 8 )
